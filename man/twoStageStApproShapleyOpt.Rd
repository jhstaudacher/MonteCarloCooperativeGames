% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/twoStageStApproShapleyOpt.R
\name{twoStageStApproShapleyOpt}
\alias{twoStageStApproShapleyOpt}
\title{Two Stage St Appro Shapley Opt}
\usage{
twoStageStApproShapleyOpt(n, v, min_sample_size, first_stage_size = 0.5)
}
\arguments{
\item{n}{integer: Indicates the cardinality of the set of players \code{N} (The number of players).}

\item{v}{function: The characteristic function.}

\item{min_sample_size}{The amount of samples that should be taken.
Based on the variances of each stratum it is likely to happen, that more
samples are used than specified in \code{min_sample_size}. The actual sample size
depends on the problem.}

\item{first_stage_size}{The amount of samples to use for the first stage as
a ratio. Usually 0.5 (half of all samples).}
}
\value{
A list of Shapley values of every player.
}
\description{
Calculates the shapley value for each player with stratification and
sample size per strata based on each stratum's variance.
}
\details{
Stratified:
This function uses strata to calculate the shapley value. A stratum is
created for each player at each possible position. E.g. there is a stratum
for player 1 at position 1, for player 1 at position 2..., for player 2
at position 1, for player 2 at position 2...

Two Stages:
The computation is split into two stages. The first stage gets a fixed amount
of samples (\code{min_sample_size * first_stage_size}) which are distributed to each
stratum equally. While sampling for the first stage, the variance of each
stratum is recorded next to the shapley value.
In the second stage, the variances are used to calculate the amount of
samples each stratum should get in total. If a stratum already got enough
samples from stage one it is not sampled again in stage two, otherwise the
remaining samples are taken for each stratum. This probably leads to more
samples taken in total than specified by min_sample_size (hence the name).
}
\examples{
\donttest{
# sample a airport game with 100 players
costs <- buildAirportCostVector(list(
  c(1, 8), c(2, 12), c(3, 6), c(4, 14), c(5, 8), c(6, 9),
  c(7, 13), c(8, 10), c(9, 10), c(10, 10)
))
v <- airportGameForSampling(costs)
Sh <- twoStageStApproShapleyOpt(length(costs), v, 100000)
}
}
\references{
CASTRO, J. et al. (2017) "Improving polynomial estimation of the Shapley value by stratified random sampling with optimum allocation", Computers and Operations Research 82, pp. 182
}
\author{
David Ulrich
}
